import os
import sys
import logging
import subprocess
from datetime import datetime
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QLabel, QListWidget, 
                            QHBoxLayout, QPushButton, QSplitter, QPlainTextEdit,
                            QMessageBox)
from PyQt5.QtCore import QThread, pyqtSignal, QFileSystemWatcher, QTimer, Qt
from PyQt5.QtGui import QTextCharFormat, QColor, QTextCursor

# ロガーの設定
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DirectoryWatcher(QThread):
    directory_changed = pyqtSignal(str)

    def __init__(self, directory):
        super().__init__()
        self.directory = directory
        self.watcher = QFileSystemWatcher([self.directory])
        self.watcher.directoryChanged.connect(self.on_directory_changed)
        logger.debug(f"DirectoryWatcher initialized with directory: {directory}")

    def on_directory_changed(self, path):
        logger.debug(f"Directory changed: {path}")
        self.directory_changed.emit(path)

    def update_directory(self, new_directory):
        logger.debug(f"Updating directory watcher from {self.directory} to {new_directory}")
        if self.watcher.directories():
            self.watcher.removePaths(self.watcher.directories())
        self.directory = new_directory
        self.watcher.addPath(new_directory)

class DirectoryWatchTab(QWidget):
    def __init__(self):
        super().__init__()
        self.setObjectName("directory_watch_tab")
        logger.debug("Initializing DirectoryWatchTab")
        
        # メインレイアウトの設定
        self.main_layout = QVBoxLayout()
        self.main_layout.setContentsMargins(10, 10, 10, 10)
        self.main_layout.setSpacing(10)
        self.setLayout(self.main_layout)
        
        # 情報エリアの設定
        info_layout = QHBoxLayout()
        self.time_label = QLabel(f"UTC: {datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')}")
        self.user_label = QLabel("User: GingaDza")
        info_layout.addWidget(self.time_label)
        info_layout.addStretch()
        info_layout.addWidget(self.user_label)
        self.main_layout.addLayout(info_layout)
        
        # デバッグ用ラベルの追加
        self.debug_label = QLabel("デバッグ情報: 初期化中...")
        self.debug_label.setStyleSheet("color: blue;")
        self.main_layout.addWidget(self.debug_label)
        
        # 情報ラベルの追加
        self.info_label = QLabel("監視するディレクトリを選択してください")
        self.main_layout.addWidget(self.info_label)

        # メインスプリッターの作成（水平分割）
        self.main_splitter = QSplitter(Qt.Horizontal)
        self.main_layout.addWidget(self.main_splitter)
        
        # スプリッターがレイアウトの残りのスペースを占めるように設定
        self.main_layout.setStretch(1, 1)

        # 左側のウィジェット
        self.left_widget = QWidget()
        self.left_layout = QVBoxLayout(self.left_widget)
        self.left_layout.setContentsMargins(5, 5, 5, 5)
        self.left_layout.setSpacing(5)

        # ファイルリストの追加
        self.dir_list = QListWidget()
        self.dir_list.setMinimumHeight(400)  # 最小の高さを設定
        self.left_layout.addWidget(self.dir_list)

        # ボタンレイアウトの設定
        button_layout = QHBoxLayout()
        button_layout.setSpacing(10)
        
        self.start_watch_button = QPushButton("監視開始")
        self.stop_watch_button = QPushButton("監視停止")
        self.debug_button = QPushButton("デバッグ情報")
        self.debug_button.clicked.connect(self.show_debug_info)
        
        button_layout.addWidget(self.start_watch_button)
        button_layout.addWidget(self.stop_watch_button)
        button_layout.addWidget(self.debug_button)
        self.left_layout.addLayout(button_layout)

        # 右側のウィジェット
        self.right_widget = QWidget()
        self.right_layout = QVBoxLayout(self.right_widget)
        self.right_layout.setContentsMargins(5, 5, 5, 5)
        self.right_layout.setSpacing(5)

        # ツリービューのラベルとウィジェット
        self.tree_label = QLabel("📁 ディレクトリツリー")
        self.right_layout.addWidget(self.tree_label)

        self.tree_output = QPlainTextEdit()
        self.tree_output.setReadOnly(True)
        self.tree_output.setMinimumHeight(400)  # 最小の高さを設定
        self.right_layout.addWidget(self.tree_output)

        # 更新ボタン
        self.refresh_button = QPushButton("🔄 更新")
        self.refresh_button.clicked.connect(self.manual_refresh)
        self.right_layout.addWidget(self.refresh_button)

        # スプリッターにウィジェットを追加
        self.main_splitter.addWidget(self.left_widget)
        self.main_splitter.addWidget(self.right_widget)
        
        # スプリッターの初期サイズ比率を設定（1:1）
        self.main_splitter.setStretchFactor(0, 1)
        self.main_splitter.setStretchFactor(1, 1)

        # 設定タブからアプリケーションディレクトリを取得
        self.directory = self.get_app_directory()
        logger.debug(f"Initial directory from settings: {self.directory}")
        if not self.directory:
            self.directory = os.getcwd()  # デフォルトとして現在のディレクトリを使用
            logger.debug(f"Using current working directory as fallback: {self.directory}")
        self.debug_label.setText(f"デバッグ情報: 初期ディレクトリ = {self.directory}")

        # 監視の設定
        self.watcher_thread = DirectoryWatcher(self.directory)
        self.watcher_thread.directory_changed.connect(self.update_directory_list)
        self.watcher_thread.start()

        # シグナル接続
        self.start_watch_button.clicked.connect(self.start_watching)
        self.stop_watch_button.clicked.connect(self.stop_watching)

        # 初期化
        self.previous_snapshot = self.get_directory_snapshot()
        self.update_tree_view(set())

        # 監視タイマーの設定（5秒間隔）
        self.timer = QTimer(self)
        self.timer.setInterval(5000)
        self.timer.timeout.connect(self.check_for_changes)
        self.timer.start()

        # 設定の更新を確認するタイマー
        self.settings_timer = QTimer(self)
        self.settings_timer.setInterval(5000)
        self.settings_timer.timeout.connect(self.check_app_directory)
        self.settings_timer.start()
        
        logger.debug("DirectoryWatchTab initialization complete")

    def show_debug_info(self):
        """デバッグ情報を表示する"""
        main_window = None
        settings_tab = None
        debug_info = []
        
        # 親ウィジェットの検索
        parent = self.parent()
        debug_info.append(f"Parent type: {type(parent).__name__}")
        
        while parent:
            debug_info.append(f"Checking parent: {type(parent).__name__}")
            if hasattr(parent, 'tabs'):
                main_window = parent
                debug_info.append(f"Found main window with {main_window.tabs.count()} tabs")
                break
            parent = parent.parent()
        
        # 設定タブの検索
        if main_window:
            for i in range(main_window.tabs.count()):
                tab = main_window.tabs.widget(i)
                tab_name = type(tab).__name__
                debug_info.append(f"Tab {i}: {tab_name} (obj_name: {tab.objectName()})")
                
                if tab_name == "SettingsTab" or tab.objectName() == "settings_tab":
                    settings_tab = tab
                    debug_info.append(f"Found settings tab at index {i}")
                    
                    # 設定タブの属性を確認
                    if hasattr(settings_tab, 'get_app_directory'):
                        debug_info.append(f"get_app_directory method exists")
                        dir_value = settings_tab.get_app_directory()
                        debug_info.append(f"get_app_directory returns: {dir_value}")
                    else:
                        debug_info.append("get_app_directory method NOT found")
                        
                    if hasattr(settings_tab, 'app_dir_edit'):
                        debug_info.append(f"app_dir_edit property exists")
                        if hasattr(settings_tab.app_dir_edit, 'text'):
                            dir_text = settings_tab.app_dir_edit.text()
                            debug_info.append(f"app_dir_edit.text returns: {dir_text}")
                    else:
                        debug_info.append("app_dir_edit property NOT found")
        else:
            debug_info.append("Main window NOT found")
        
        # 現在のディレクトリ情報
        debug_info.append(f"Current directory: {self.directory}")
        
        # デバッグ情報をダイアログで表示
        QMessageBox.information(self, "デバッグ情報", "\n".join(debug_info))

    def get_app_directory(self):
        """設定タブからアプリケーションディレクトリを取得"""
        try:
            # mainWindowへの参照を取得
            main_window = None
            parent = self.parent()
            logger.debug(f"Initial parent type: {type(parent).__name__}")
            
            while parent:
                logger.debug(f"Checking parent type: {type(parent).__name__}")
                if hasattr(parent, 'tabs'):
                    main_window = parent
                    logger.debug(f"Found main window with {main_window.tabs.count()} tabs")
                    break
                parent = parent.parent()
            
            if main_window:
                # 設定タブを探す
                for i in range(main_window.tabs.count()):
                    tab = main_window.tabs.widget(i)
                    logger.debug(f"Tab {i} type: {type(tab).__name__}, objectName: {tab.objectName()}")
                    
                    if tab.objectName() == "settings_tab" or type(tab).__name__ == "SettingsTab":
                        logger.debug(f"Found settings tab at index {i}")
                        
                        # get_app_directoryメソッドがある場合はそれを使用
                        if hasattr(tab, 'get_app_directory'):
                            logger.debug("Using get_app_directory method from settings tab")
                            directory = tab.get_app_directory()
                            logger.debug(f"get_app_directory returned: {directory}")
                            if directory and os.path.exists(directory):
                                return directory
                        
                        # app_dir_editウィジェットがある場合はそれを使用
                        elif hasattr(tab, 'app_dir_edit'):
                            logger.debug("Using app_dir_edit from settings tab")
                            if hasattr(tab.app_dir_edit, 'text'):
                                directory = tab.app_dir_edit.text()
                                logger.debug(f"app_dir_edit.text returned: {directory}")
                                if directory and os.path.exists(directory):
                                    return directory
            else:
                logger.debug("Could not find main window")
                
        except Exception as e:
            logger.error(f"Error getting app directory: {e}")
            
        return None

    def check_app_directory(self):
        """アプリケーションディレクトリの変更を確認"""
        try:
            new_directory = self.get_app_directory()
            self.debug_label.setText(f"デバッグ情報: 現在のディレクトリ = {self.directory}, 新しいディレクトリ = {new_directory}")
            logger.debug(f"check_app_directory - current: {self.directory}, new: {new_directory}")
            
            if new_directory and new_directory != self.directory and os.path.exists(new_directory):
                logger.debug(f"Updating directory from {self.directory} to {new_directory}")
                self.directory = new_directory
                self.watcher_thread.update_directory(new_directory)
                self.info_label.setText(f"監視中: {self.directory}")
                self.previous_snapshot = self.get_directory_snapshot()
                self.update_tree_view(set())
                self.update_directory_list(new_directory)
        except Exception as e:
            logger.error(f"Error checking app directory: {e}")

    def get_directory_snapshot(self):
        snapshot = {}
        try:
            for root, dirs, files in os.walk(self.directory):
                for name in files:
                    filepath = os.path.join(root, name)
                    rel_path = os.path.relpath(filepath, self.directory)
                    snapshot[rel_path] = os.path.getmtime(filepath)
        except Exception as e:
            logger.error(f"Error getting directory snapshot: {e}")
        return snapshot

    def check_for_changes(self):
        try:
            current_snapshot = self.get_directory_snapshot()
            new_files = set(current_snapshot.keys()) - set(self.previous_snapshot.keys())
            
            if new_files:
                logger.debug(f"Detected {len(new_files)} new files")
                self.previous_snapshot = current_snapshot
                self.update_tree_view(new_files)
        except Exception as e:
            logger.error(f"Error checking for changes: {e}")

    def update_tree_view(self, new_files):
        try:
            result = subprocess.run(
                ["tree", "-f", "--noreport"],
                capture_output=True,
                text=True